#!/usr/bin/env python3

from pyfiles.git_codes import *
from pyfiles.configure_settings_py import compile_dir_list
from pyfiles.my_prompt import main as prompt
import time

root_repo = backward_search()
pycache, venv = compile_dir_list(root_repo, venv=True)
pycache = [i for i in pycache if not os.path.isfile(i) and i.split('/')[-1] == '__pycache__']
delimiter = root_repo + os.sep
gitignore_content = write_to_file([], '', read=True)
pycache = [file for file in pycache if file.split(delimiter)[-1] not in gitignore_content]
venv = [dir for dir in venv if dir.split(delimiter)[-1] not in gitignore_content]
def gitignore():
	auto_set_pycache1 = setup_gitignore()
	gitignore_resp(auto_set_pycache1, pycache)
	auto_set_pycache2 = setup_gitignore(pycache=venv, envFile=True)
	ret = gitignore_resp(auto_set_pycache2, venv)
	if ret == 'n':
		browse_files()
	print()
	print('Successful.')
	print('Check the root of your repository for the newly created/updated .gitignore file')


def setup_gitignore(pycache: list=pycache, envFile: bool=False):
	mainVar = 'Setting up and/or Updating .gitignore file (For'
	var = '__pycache__ directories'
	if envFile:
		var = 'venv directories'
	if pycache == []:
		print(f'==> .gitignore file is upto date with "{var}"')
		time.sleep(.5)
		cont = input('Press Enter to continue...')
		return 'n'
	print()
	print(f'{mainVar} {var})')
	print('.'.rjust(len(mainVar)+len(var)+3, '.'))
	for index, filepath in enumerate(pycache):
		filepath = filepath.split(delimiter)[-1]
		print(f'{index+1}. {filepath}')
	print()
	print('[y] or [Enter] - Add the list to .gitignore file')
	print('Press any key to browse through this dir (and subdirs) and select files/dirs to ignore')
	print('[q] - To quit')
	print()
	auto_set_pycache = prompt('Make a choice >>> ')
	print()
	return auto_set_pycache

def gitignore_resp(auto_set_pycache: str, pycache: list):
	root_list = []
	if auto_set_pycache.lower() == 'q':
		print('Cheers...')
		sys.exit(0)
	elif auto_set_pycache.lower() == 'y' or auto_set_pycache == '\n':
		for file in pycache:
			root_list.append(file)
		write_to_file(root_list, delimiter=delimiter)
	else:
		return 'n'

def browse_files():
	root_list = []
	for file in os.listdir(root_repo):
		root_list.append(f'{root_repo}{os.sep}{file}')
	search_repo(root_list, delimiter=delimiter)

	
if __name__ == '__main__':
	gitignore()
