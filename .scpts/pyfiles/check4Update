#!/usr/bin/env bash

is_repo() {
	[[ -d ".git" ]]
}

check4UpdateFunc() {
	clear # uncomment this
	echo -e ""
	# --- SETTINGS ---
	LOCAL_FILE="./setScript.sh"
	VERSIONNUMBER="20250529.1130"
	REMOTE_FILE_URL="https://raw.githubusercontent.com/DafetiteOgaga/custom_commands/master/setScript.sh"

	# --- EXTRACT LOCAL VERSION ---
	# local_version=$(grep -oP 'VERSIONNUMBER="\K[0-9.]+' "$LOCAL_FILE")
	local_version="$VERSIONNUMBER"

	# --- EXTRACT REMOTE VERSION ---
	remote_file_content=$(curl -fsSL "$REMOTE_FILE_URL") || {
		echo "Failed to fetch remote file."
		return
	}
	# echo "remote_file_content: $remote_file_content"
	remote_version=$(echo "$remote_file_content" | grep -oP 'VERSIONNUMBER="\K[0-9.]+')

	if [[ "$local_version" != "$remote_version" ]]; then
		# echo ""
		echo "Update Available!"
		echo "------------------------------"
		echo "Current Version: $local_version"
		echo "Latest Version:  $remote_version"
		echo ""
		read -n 1 -s -r -p "Pull update? [y/N] >>> " PULL_UPDATE
		if [[ "$PULL_UPDATE" =~ [nN] ]]; then
			echo -e "no\n"
			echo -e "Skipping update..."
		else
			echo -e "yes"
			echo -e "\nPulling update...\n"
			if is_repo; then
				gitOp=$(git pull origin master 2>&1)
				if [[ $? -eq 0 ]]; then
					echo -e "$gitOp"
					echo -e "\nUpdate pulled successfully."
				else
					echo -e "Git Pull Failed:\n$gitOp"
					# sleep 4
				fi
			else
				echo "This is not a git repository. Cannot pull updates."
				exit 1
			fi
		fi
		sleep 5
		echo -e ""
	# else
	#     echo "âœ… Versions match."
	fi
}

# ENTRY POINT

NOW=$(date +%s)
LAST_UPDATE_FILE="$HOME/.xbin/pyfiles/lastUpdateTime.txt"

mkdir -p "$(dirname "$LAST_UPDATE_FILE")"

if [[ ! -f "$LAST_UPDATE_FILE" ]]; then
	echo "Last update file not found. Creating a new one."
	echo "$NOW" > "$LAST_UPDATE_FILE"
fi

LAST_CHECK=$(cat "$LAST_UPDATE_FILE")

# echo "NOW: $NOW"
# echo "LAS: $((LAST_CHECK + 86400))"
# echo "NOW > LAST_CHECK: $(( NOW > LAST_CHECK + 86400 ))"

if (( NOW > LAST_CHECK + 86400 )); then
	# echo ""
	# echo "Last update check was more than 24 hours ago."
	# read ch
	check4UpdateFunc
	echo "$NOW" > "$LAST_UPDATE_FILE"
# else
# 	echo "Last update check was less than 24 hours ago."
fi

# echo "PULL_UPDATE: $PULL_UPDATE"
# read yes
