#!/usr/bin/env bash

# Kindly supply your Github Username and Personal Access Token(without the "ghp_").
IGITHUBUSERNAME="YOUR_GITHUB_USERNAME"
IGITHUBACCESSTOKEN="YOUR_PERSONAL_ACCESS_TOKEN"
IGITHUBEMAIL="YOUR_REGISTERED_GITHUB_EMAIL"
GUSERNAME="$IGITHUBUSERNAME"
GTOKEN="$IGITHUBACCESSTOKEN"
GEMAIL="$IGITHUBEMAIL"

UREPO="$1"
CHK="$2"
CLCR="$3"
AUSERNAME="$4"
RESP="$5"
TOKEN="$6"
REPONAME="$7"
NUM1=36
exit_status=0

#...functions .................. #

function exiting ()
{
	echo -e "\nOperation aborted ..."
	exit 0
}

function lines ()
{
	echo ""
	echo ".........................................."
}

disp()
{
    page_size=9
    total_repos=${#repo_names[@]}
    num_pages=$(( (total_repos + page_size - 1) / page_size ))

    page=1
    while true; do
        clear
        echo "Available repositories in $AUSERNAME:"
        echo "Page $page of $num_pages:"
        
        serial_number=0
        for ((i = (page - 1) * page_size; i < page * page_size && i < total_repos; i++)); do
            ((serial_number++))
            echo "$serial_number. ${repo_names[i]}"
            sleep 0.05
        done

        echo -e ""
        if (( $page > 1 )); then
            echo "[p] - Previous Page"
        fi

        if (( $page < $num_pages )); then
            echo "[n] - Next Page"
        fi
		echo "[q] - quit"

		selection=""
        echo -e ""
        read -n 1 -s -r -p "Enter the number corresponding to the repository you want to clone >>> " selection
        echo -e "$selection"

        if [[ "$selection" =~ [qQ] ]]; then
			exiting
		elif [[ "$selection" =~ [nN] && "$page" -lt "$num_pages" ]]; then
            ((page++))
        elif [[ "$selection" =~ [pP] && "$page" -gt 1 ]]; then
            ((page--))
        elif [[ "$selection" =~ ^[1-9]|[1-9][0-9]|[1-9][0-9][0-9]*$ && "$selection" -le "$serial_number" ]]; then
            converted_selection="$(( ($page - 1) * $page_size + $((selection-1)) ))"
            selected_repo=${repo_names_cleaned[$converted_selection]}

			echo -e ""
            echo "You selected: $selected_repo"
			# exit 0
            break
        else
            echo "Invalid selection."
        fi
    done
}

get_repositories()
{
	echo ""
	echo "Hold on ..."
	echo ""
	echo -e "Preparing the lists of $AUSERNAME's public repos ..."
	public_list
	echo ""
}

# ........................................................................... X
function git_check()
{
	echo "....................................................."
	curr_dir="$(pwd)"
	cd "$REPONAME"
	post_clone=(
		"Repository forked and cloned successfully."
		"....................................................."
		"Setting up the local user(i.e commit author) for this repo"
		"..........................................................."
		"User: $GUSERNAME"
		"Email: $GEMAIL"
		"..........................................................."
		"$(git config user.name "$GUSERNAME")"
		"$(git config user.email "$GEMAIL")"
		"\"$REPONAME\" has been successfully forked on remote and cloned locally in the directory: \n$curr_dir"
		"$(lines)"
	)
	for i in "${post_clone[@]}"; do
		echo -e "$i"
		sleep 0.08
	done
	cd ../
}
# ........................................................................... X
cloning()
{
	echo -e "\nYou are now cloning the repository \"$REPONAME\" in the account \"$AUSERNAME\"...\n"
	git clone https://ghp_$GTOKEN@github.com/$GUSERNAME/$REPONAME.git
	clone_exit_status="$?"
	# fi
	if [[ $clone_exit_status != 0 ]]; then
		echo "....................................................."
		echo "Oops! something went wrong. Error cloning repository."
		echo "Exit status code: $clone_exit_status"
		echo "....................................................."
		exit 1
	fi
}
# ........................................................................... X
forking()
{
	echo "Forking repository \"$REPONAME\" in the account \"$AUSERNAME\"..."
	response=$(curl -u "$GUSERNAME:ghp_$GTOKEN" -X POST "https://api.github.com/repos/$AUSERNAME/$REPONAME/forks" 2>&1)
	exit_status_code=$?
	sleep 2
	if [[ "$exit_status_code" == 0 || "$(echo "$response" | grep -i '"full_name"')" ]]; then
		echo "Done. Forked repository successfully."
		cloning
	else
		echo "....................................................."
		echo "Oops! something went wrong. Error forking repository."
		echo "Exit status code: $exit_status_code"
		echo "....................................................."
		exit 1
	fi
}

public_list()
{
	public_response=$(curl -s "https://api.github.com/users/$AUSERNAME/repos?type=public&per_page=100")

	if [[ "$public_response" == *"message"* && "$public_response" == *"Not Found"* ]]; then
		echo "User $AUSERNAME not found on GitHub."
		exit 1
	fi

	if [[ "$public_response" == "" ]]; then
		echo -e "Could not connect to https://github.com/$AUSERNAME"
		echo -e "Check your internet connection."
		echo -e ""
		exit 1
	fi

	public_resp=$(echo "$public_response" | grep -oP '"full_name": "\K[^"]+' | awk -F'/' '{print $2}')

	repo_names=($public_resp)
	repo_names_cleaned=($public_resp)

	for ((i=0; i<${#repo_names[@]}; i++)); do
		repo_names[$i]="${repo_names[$i]} (pub)"
	done

	disp
	REPONAME="$selected_repo"
}

# ENTRY POINT ...

#... chk.................. #
confirm_dir_location()
{
	while true; do
		echo ""
		echo -e "Pls, confirm that this is the directory where you want to clone the repo:"
		echo -e "Current Directory: $(pwd)"
		echo ""
		echo -n "Do you want to abort to fix this? [y/N] >>> "
		read -n 1 -s -r CLCR
		echo -e "$CLCR"

		if [[ "$CLCR" =~ [yYnN] ]]; then
			break
		fi
	done

	if [[ "$CLCR" =~ [yY] ]]; then
		echo ""
		echo -e "Ok."
		exiting
	fi
}

# if [[ "$CHK" == "no" ]]; then
echo ""
echo -n "Provide the Github Username of the repo you want to fork >>> "
read AUSERNAME

if [ -z "$AUSERNAME" ]; then
	lines
	echo -e "You must provide a valid Username."
	exiting
fi

confirm_dir_location

count=0
while true; do
	if [[ "$count" -gt 0 ]]; then
		echo -n "Clone more? [y/N] >>> "
		read -n 1 -s -r RESP0
		echo -e "$RESP0"
	fi

	if [[ ("$count" -eq 0 && -z "$RESP0") || "$RESP0" =~ [yY] ]]; then
		get_repositories
		forking
		git_check
	elif [[ "$RESP0" =~ [nN] ]]; then
		echo -e ""
		echo -e "Cheers."
		exit 0
	fi
	((count++))
done
