#!/bin/bash

# Kindly supply your Github Username and Personal Access Token(without the "ghp_").
GUSERNAME="YOUR_GITHUB_USERNAME"
GTOKEN="YOUR_PERSONAL_ACCESS_TOKEN"
GEMAIL="YOUR_REGISTERED_GITHUB_EMAIL"

UREPO="$1"
CHK="$2"
CLCR="$3"
AUSERNAME="$4"
RESP="$5"
TOKEN="$6"
REPONAME="$7"
NUM1=36
exit_status=0

#...functions .................. #

function exiting ()
{
	echo -e "\nOperation aborted ..."
	exit 0
}

function lines ()
{
	echo ""
	echo ".........................................."
}

disp()
{
    page_size=9
    total_repos=${#repo_names[@]}
    num_pages=$(( (total_repos + page_size - 1) / page_size ))

    page=1
    while true; do
        clear
        echo "Available repositories in $AUSERNAME:"
        echo "Page $page:"
        
        serial_number=0
        for ((i = (page - 1) * page_size; i < page * page_size && i < total_repos; i++)); do
            ((serial_number++))
            echo "$serial_number. ${repo_names[i]}"
            sleep 0.05
        done

        echo -e ""
        if (( $page > 1 )); then
            echo "[p] - Previous Page"
        fi

        if (( $page < $num_pages )); then
            echo "[n] - Next Page"
        fi
		echo "[q] - quit"

		selection=""
        echo -e ""
        read -n 1 -s -r -p "Enter the number corresponding to the repository you want to clone >>> " selection
        echo -e "$selection"

        if [[ "$selection" =~ [qQ] ]]; then
			exiting
		elif [[ "$selection" =~ [nN] && "$page" -lt "$num_pages" ]]; then
            ((page++))
        elif [[ "$selection" =~ [pP] && "$page" -gt 1 ]]; then
            ((page--))
        elif [[ "$selection" =~ ^[1-9]|[1-9][0-9]|[1-9][0-9][0-9]*$ && "$selection" -le "$serial_number" ]]; then
            converted_selection="$(( ($page - 1) * $page_size + $((selection-1)) ))"
            selected_repo=${repo_names_cleaned[$converted_selection]}
            
			echo -e ""
            echo "You selected: $selected_repo"
            break
        else
            echo "Invalid selection."
        fi
    done
}

get_repo_name()
{
	echo ""
	echo "Hold on ..."
	echo ""
	if [[ -z "$TOKEN" && "$CHK" == "no" ]]; then
		# someone's public repo
		public_list

	elif [[ "$CHK" == "yes" ]]; then
		# users repo
		if [[ "$TOKEN" == *"ghp_"* ]]; then
			echo -e ""
		else
			TOKEN="ghp_$TOKEN"
		fi

		public_response=$(curl -s "https://api.github.com/users/$AUSERNAME/repos?type=public&per_page=100")

		private_response=$(curl -s -H "Authorization: token $TOKEN" \
		"https://api.github.com/user/repos?visibility=private")

		if [[ "$public_response" == *"message"* && "$public_response" == *"Not Found"* ]]; then
			echo "User $AUSERNAME not found on GitHub."
			exit 1
		fi

		if [[ "$private_response" == *"message"* && "$private_response" == *"Bad credentials"* ]]; then
			echo "Bad credentials. Make sure your GitHub token is valid and has the required permissions."
			exit 1
		fi

		if [[ "$public_response" == "" || "$private_response" == "" ]]; then
			echo -e "Could not connect to https://github.com/$AUSERNAME"
			echo -e "Check your internet connection."
			echo -e ""
			exit 1
		fi

		public_resp=$(echo "$public_response" | grep -oP '"full_name": "\K[^"]+' | awk -F'/' '{print $2}')

    	private_resp=$(echo "$private_response" | grep -oP '"full_name": "\K[^"]+' | awk -F'/' '{print $2}')
		
		pub_arr=($public_resp)
		pri_arr=($private_resp)

		repo_names_cleaned=("${pub_arr[@]}" "${pri_arr[@]}")

		for ((i=0; i<${#pub_arr[@]}; i++)); do
			pub_arr[$i]="${pub_arr[$i]} (pub)"
		done

		for ((i=0; i<${#pri_arr[@]}; i++)); do
			pri_arr[$i]="${pri_arr[$i]} (priv)"
		done

		repo_names=("${pub_arr[@]}" "${pri_arr[@]}")
		disp
		REPONAME="$selected_repo"

	elif [[ "$TOKEN" && "$CHK" == "no" ]]; then
		# collaboration
		while true; do
			read -n 1 -s -r -p "Is this repository public? [y/N] (Collaboration) >>> " pub
			echo -e "$pub"
			if [[ "$pub" =~ [yYnN] ]]; then
				break
			fi
		done
		if [[ "$pub" =~ [yY] ]]; then
			echo -e ""
			echo -e "Preparing the lists of $AUSERNAME's public repos ..."
			public_list
		elif [[ "$pub" =~ [nN] ]]; then
			echo -n "Provide the name of the repository >>> "
			read REPONAME
		fi
	fi

	if [[ -z "$REPONAME" ]]; then
		lines
		echo -e "You can't clone a repo without a name..."
		exiting
	fi
}

# ........................................................................... X
function git_check()
{
	echo "....................................................."
	curr_dir="$(pwd)"
	cd "$REPONAME"
	post_clone=(
		"Repository cloned successfully."
		"....................................................."
		"Setting up the local user(i.e commit author) for this repo"
		"..........................................................."
		"User: $GUSERNAME"
		"Email: $GEMAIL"
		"..........................................................."
		"$(git config user.name "$GUSERNAME")"
		"$(git config user.email "$GEMAIL")"
		"\"$REPONAME\" has been successfully cloned in the directory: \n$curr_dir"
		"$(lines)"
	)
	for i in "${post_clone[@]}"; do
		echo -e "$i"
		sleep 0.08
	done
	cd ../
}
# ........................................................................... X

cloning()
{
	echo -e "\nYou are now cloning the repository \"$REPONAME\" in the account \"$AUSERNAME\"...\n"

	echo -e "......................Cloning repo........................"
	if [ -z "$TOKEN" ]; then
		git clone https://github.com/$AUSERNAME/$REPONAME.git
		exit_status=$?
	else
		git clone https://$TOKEN@github.com/$AUSERNAME/$REPONAME.git
		exit_status=$?
	fi
	if [[ $exit_status != 0 ]]; then
		echo "....................................................."
		echo "Oops! something went wrong. Error cloning repository."
		echo "Exit status code: $exit_status"
		echo "....................................................."
		exit 1
	fi
}

public_list()
{
	public_response=$(curl -s "https://api.github.com/users/$AUSERNAME/repos?type=public&per_page=100")

	if [[ "$public_response" == *"message"* && "$public_response" == *"Not Found"* ]]; then
		echo "User $AUSERNAME not found on GitHub."
		exit 1
	fi

	if [[ "$public_response" == "" ]]; then
		echo -e "Could not connect to https://github.com/$AUSERNAME"
		echo -e "Check your internet connection."
		echo -e ""
		exit 1
	fi

	public_resp=$(echo "$public_response" | grep -oP '"full_name": "\K[^"]+' | awk -F'/' '{print $2}')

	repo_names=($public_resp)
	repo_names_cleaned=($public_resp)

	for ((i=0; i<${#repo_names[@]}; i++)); do
		repo_names[$i]="${repo_names[$i]} (pub)"
	done

	disp
	REPONAME="$selected_repo"
}

# main ...
echo ""
echo -e "You are attempting to clone a Github repository.\n"
echo -n "Is the Github Account \"$GUSERNAME\" yours? [y/N] >>> "
read -n 1 -s -r UREPO
echo -e "$UREPO"

if [[ "$UREPO" =~ [yY] ]]; then
	CHK="yes"
elif [[ "$UREPO" =~ [nN] ]]; then
	CHK="no"
else
	lines
	echo -e "Invalid response."
	exiting
fi


#... chk.................. #
while true; do
	echo ""
	echo -e "Pls, check your PATH and CURRENT DIRECTORY that you are not cloning into an existing repo."

	echo -n "Do you want to abort to fix this? [y/N] >>> "
	read -n 1 -s -r CLCR
	echo -e "$CLCR"

	if [[ "$CLCR" =~ [yYnN] ]]; then
		break
	fi
done

if [[ "$CLCR" =~ [yY] ]]; then
	echo ""
	echo -e "Ok."
	exiting
fi

if [[ "$CHK" == "no" ]]; then
	echo ""
	echo -n "Provide the Github Username >>> "
	read AUSERNAME

	if [ -z "$AUSERNAME" ]; then
		lines
		echo -e "You must provide a valid Username."
		exiting
	fi

	while true; do
		echo ""
		echo -e "Are you a collaborator?"
		echo -n "Do you have the PAT(classic) for this repository in $AUSERNAME's? [y/N] >>> "
		read -n 1 -s -r RESP
		echo -e "$RESP"
		if [[ "$RESP" =~ [yYnN] ]]; then
			break
		fi
	done

	
	if [[ "$RESP" =~ [yY] ]]; then
		echo ""
		echo -n "Enter the PAT(classic) without the \"ghp_\" >>> "
		read TOKEN
	
		if [ -z "$TOKEN" ]; then
			lines
			echo -e "Didn't you just say you have the PAT?"
			exiting
		fi

		NUM2=${#TOKEN}
		
		if [[ $NUM2 != $NUM1 ]]; then
			lines
			echo -e "The TOKEN: $TOKEN which you supplied is not the classic TOKEN I expected.\n"
			exiting
		fi
		TOKEN="ghp_$TOKEN"
	fi
else
	AUSERNAME="$GUSERNAME"
	TOKEN="ghp_$GTOKEN"
fi


count=0
while true; do
	if [[ "$count" -gt 0 ]]; then
		echo -n "Clone more? [y/N] >>> "
		read -n 1 -s -r RESP0
		echo -e "$RESP0"
	fi

	if [[ ("$count" -eq 0 && -z "$RESP0") || "$RESP0" =~ [yY] ]]; then
		get_repo_name
		cloning
		git_check
	elif [[ "$RESP0" =~ [nN] ]]; then
		echo -e ""
		echo -e "Cheers."
		exit 0
	fi
	((count++))
done
