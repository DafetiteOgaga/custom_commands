#!/usr/bin/env bash

#...functions.................. #

SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

function exiting ()
{
	echo -e "\nOperation aborted!!!....................."
	exit 1
}

edit_in_place() {
	# replaces user details fields with user details
	local var1="$1" # what to find
	local var2="$2" # what to replace with
	# $XBIN/$DFILENAME is the path to the file
	sed -i "s|$var1|$var2|g" "$(pwd)/README.md"
}

setup_local_config() {
	local username="$1"
	local email="$2"
	echo -e "Setting up the local user(i.e commit author) for this repo"
	echo -e "..........................................................."
	echo -e "User: $username"
	echo -e "Email: $email"
	echo -e "..........................................................."
	echo -e ""
	git config user.name "$username"
	git config user.email "$email"
}

create_readme() {
	local reponame="$1"
	cp "$SCRIPT_DIR/pyfiles/createRepoReadme.md" "$(pwd)/README.md"
	edit_in_place "REPONAME" "$reponame"
	git add .
	git commit -m "$reponame auto created"
	git push
}

repo_created_successfully() {
	local reponame="$1"
	local username="$2"
	echo -e ".........................................................."
	echo -e "Successful."
	echo "\"$reponame\" has been created."
	echo "This repo now reside in the Github Account \"$username\"."
	echo "It has also been cloned into this directory."
	echo "A Default Readme file has equally been created, staged and pushed to $username/$reponame for you."
	echo -e "........................................................."
}

is_valid_repo_name() {
    local name="$1"
    if [[ "$name" =~ [^a-zA-Z0-9._-] ]]; then
        echo "Invalid repository name. It should only contain alphanumeric characters, dots, underscores, and hyphens."
		exiting
    # else
    #     echo "Valid repository name: $REPONAME"
    fi
}

is_repo_name_too_long() {
    local name="$1"
		if (( ${#name} > 100 )); then
		echo "Repo name is too long (max 100 characters)."
		exiting
	fi
}

#... chk.................. #
function git_check()
{
	local exit_status="$1"
	echo "....................................................."
	if [ "$exit_status" -eq 0 ]; then
		echo "Repository cloned successfully."
		echo "....................................................."
	else
		echo "Oops! something went wrong. Error cloning repository."
		echo "Exit status code: $exit_status"
		echo "....................................................."
		exit 1
	fi
}


curl_check()
{
    echo "....................................................."
    if [ "$exit_status" -eq 0 ]; then
        echo "Repository created successfully."
		echo -e "..........................................................."
		echo -e ""
		echo -e "Preparing to clone the repo \"$REPONAME\" in the directory $(pwd)..."
		echo -e "......................Cloning repo........................"
		git clone https://ghp_$GTOKEN@github.com/$GUSERNAME/$REPONAME.git
		exit_status="$?"
		git_check "$exit_status"
		echo -e ""
		cd "$REPONAME"
		setup_local_config "$GUSERNAME" "$GEMAIL"
		create_readme "$REPONAME"
		repo_created_successfully "$REPONAME" "$GUSERNAME"
    else
        echo "Oops! something went wrong. Error creating repository."
		echo "Exit status code: $exit_status_code"
        echo "....................................................."
        exit 1
    fi
}


function get_git_details()
{
	read -p "Enter GitHub username >>> " GUSERNAME
	if [[ -z "$GUSERNAME" ]]; then
		echo -e "You did not answer the question."
		exiting
	fi

	RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/users/$GUSERNAME")
	if [ "$RESPONSE" -ne 200 ]; then
		echo "Username \"$GUSERNAME\" does not exist on GitHub or there was an issue confirming the existence of the username."
		exiting
	fi

	read -p "Enter your GitHub personal access token (without the \"ghp_\") >>> " GTOKEN
    GTOKEN="${GTOKEN#ghp_}" #used to remove "ghp_" if user adds it
	if [[ -z "$GTOKEN" ]]; then
		echo -e "You did not answer the question."
		exiting
	fi
}


# ENTRY-POINT

# Kindly supply your Github Username and Personal Access token(without the "ghp_").
GUSERNAME="YOUR_GITHUB_USERNAME"
GTOKEN="YOUR_PERSONAL_ACCESS_TOKEN"
GEMAIL="YOUR_REGISTERED_GITHUB_EMAIL"

REPONAME="$1"
RESP="$2"
exit_status=0

if [[ -z "$GUSERNAME" ]]; then
	get_git_details
else
	RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/users/$GUSERNAME")
	if [ "$RESPONSE" -ne 200 ]; then
		echo "Username \"$GUSERNAME\" does not exist on GitHub or there was an issue confirming the existence of the username."
		exiting
	fi
fi


if [[ -z "$REPONAME" ]]; then
	echo ""
	echo -n "Please provide a repository name to create in \"$GUSERNAME\" >>> "
	read REPONAME

	if [[ -z "$REPONAME" ]]; then
		echo -e "\nYou can't create a repo without a name..."
			exiting
	fi
	is_valid_repo_name "$REPONAME"
	is_repo_name_too_long "$REPONAME"
fi
echo ""

existing_repo=$(curl -u "$GUSERNAME:ghp_$GTOKEN" "https://api.github.com/user/repos" 2>/dev/null \
  | grep -o "\"name\": *\"$REPONAME\"" | wc -l)

if [ "$existing_repo" -gt 0 ]; then
	echo -e "Repository \"$REPONAME\" already exists in https://github.com/$GUSERNAME\nAborting creation."
	exiting
fi


echo -n "Do you want the repository to be private? [Y/N] >>> "
read -n 1 -s -r PRIVATE_OPTION
# echo -e "$PRIVATE_OPTION"

if [[ ${#PRIVATE_OPTION} != 1 ]]; then
	echo -e "Invalid response."
	exiting

elif [[ ${#PRIVATE_OPTION} =~ 1 && ("$PRIVATE_OPTION" =~ [yY]) ]]; then
	echo "yes, private Repo pls"
	PRIVATE_OPTION="true"

elif [[ ${#PRIVATE_OPTION} =~ 1 && ("$PRIVATE_OPTION" =~ [nN]) ]]; then
	echo "no, public Repo pls"
	PRIVATE_OPTION="false"
else
	echo -e "Invalid response."
	exiting
fi
echo ""

# echo -e "\nYou are creating the repository \"$REPONAME\" in the Account \"$GUSERNAME\"...\n"
# sleep 2
if [[ -z "$RESP" ]]; then
	echo ""
	echo -e "Pls, confirm that this is the directory where you want to create the repo:"
	echo -e "Current Directory: $(pwd)"
	echo ""
	echo -n "Do you want to abort to fix this? [y/N] >>> "
	read -n 1 -s -r RESP
	echo -e "$RESP"
	if [[ -z "$RESP" ]]; then
		echo -e "You did not answer the question."
		exiting

	elif [[ ${#RESP} != 1 ]]; then
		echo -e "Invalid response."
		exiting

	elif [[ ${#RESP} =~ 1 && ("$RESP" =~ [yY]) ]]; then
		echo -e "Ok."
		exiting

	elif [[ ${#RESP} =~ 1 && ("$RESP" =~ [nN]) ]]; then
		echo -e ""
		# git init
		# echo -e ""
		echo -e "\nCreating $REPONAME as $( [[ "$PRIVATE_OPTION" == "true" ]] && echo "private" || echo "public" )\
 in \"https://github.com/$GUSERNAME\" ......\n"

		response=$(curl -u "$GUSERNAME:ghp_$GTOKEN" -X POST "https://api.github.com/user/repos" -d '{"name":"'$REPONAME'", "private":'"$PRIVATE_OPTION"'}' 2>&1)
		exit_status_code=$?

		# echo "................................................"

		if [[ $response == *"\"name\": \"$REPONAME\""* ]]; then
			exit_status=0
		else
			exit_status=1
		fi
		curl_check
	fi
fi
echo -e ""
# SCRIPT_PATH="$(readlink -f "$0")"
# SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
# SCRIPT_NAME="$(basename "$SCRIPT_PATH")"
# echo -e "Script Path: $SCRIPT_PATH"
# echo -e "Script Directory: $SCRIPT_DIR"
# echo -e "Script Name: $SCRIPT_NAME"
