#!/bin/bash

# path1="$HOME/.xbin"
quit() {
	local var="$1"
	local var2="$2"
	local var3="$3"
	echo ""
	if [[ "$var" =~ [Qq] ]]; then
		echo "Cheers."
		exit 0
	elif [[ -z "$var" && ! "$var3" ]]; then
		item="project"
		if [[ -n "$var2" ]]; then
			item="app"
		fi
		echo "You must provide the $item's name."
		exit 0
	elif [[ "$var" =~ ^\..* ]]; then
		echo "You cannot use a hidden name for a project"
		exit 0
	fi
}

read_input()
{
	local var="$1"
	read -p "Enter "$var"'s name. [q] - quit >>> " entry
}

install_or_print_error()
{
	local var="$1"
	# echo ""
	# echo "command: $var"
	# echo ""
	returned=$($var 2>&1 >/dev/null)
	if [ $? -ne 0 ]; then
		echo "Error: $returned"
		exit 1
	fi
}

create_project()
{
	echo "Creating project directory ($response) ..."
	mkdir -p "$response"
	cd "$response"
	# echo "##### pwd directory: $PWD" # remove
	echo "Creating virtual environment: ${response}_venv in $response ..."
	install_or_print_error "py3venv ${response}_venv"
	echo "Activating virtual envionment: ${response}_venv ..."
	source "${response}_venv/bin/activate"
	venv_check
	echo "Installing django ..."
	install_or_print_error "pip install django"
	echo "Creating django project: ${response}_project ..."
	startproject "${response}_project"
	cd "${response}_project"
	# echo "##### pwd project: $PWD" # remove
}

response_check()
{
	local var="$1"
	dir_items=$(ls)
	if [[ "$dir_items" == *"$var"* ]]; then
		result=$(find . -name 'manage.py' -type f)
		if [[ -n "$result" ]]; then
			# parent_directory=$(dirname "$(dirname "$result")")
			# filename=$(basename "$result")
			directory=$(dirname "$result")
			from_root="$PWD"
			from_root+="$directory"
			cleaned_path=$(echo "$from_root" | sed 's/\.\//\//')
			if [[ "$cleaned_path" == *"$var"* ]]; then
				echo "Project exists ..."
			else
				echo "Oopsy! project '$var' exists. Choose another name"
				exit 0
			fi
		else
			echo "Item with name '$var' is not a django project."
			exit 0
		fi
	else
		create_project
	fi
}

finder()
{
	local var="$1"
	local var2="$2"
	local var3="$3"
	local var4="$4"
	local var5="$5"
	result=$(find "$2" -name "$var" -type f)
	dir_name=$(basename "$(dirname "$result")")
	directory=$(dirname "$result")
	if [[ -z "$var3" ]]; then
		echo "$dir_name"
	elif [[ "$var3" == "file" ]]; then
		echo "$result"
	elif [[ "$var3" == "app_check" ]]; then
		directory="$(select_path "$var4" "$directory")"
		directory="$(basename "$(dirname "$directory")")"
		# if [[ "$var5" == "yes" ]]; then
		# 	# directory="$(basename "$directory")"

		# 	directory="$(basename "$(dirname "$directory")")"
		# 	# echo "$directory"
		# 	# directory="$(dirname "$directory")"
		# else
		# 	directory="$(basename "$(dirname "$directory")")"
		# 	# directory="$(dirname "$directory")"
		# fi
		echo "$directory"
	else
		echo "$directory"
	fi
}

venv_check()
{
	if [ -n "$VIRTUAL_ENV" ]; then
		j=""
		# echo "Virtual environment is activated: $VIRTUAL_ENV"
	else
		echo "No virtual environment is activated"
		exit 1
	fi
}

select_path()
{
	local app="$1"
	local list_of_path="$2"
	search_term="$app"
	# echo "app: $app"
	# echo "search_term: $search_term"
	# echo "list_of_path: $list_of_path"
	# echo ""
	for path in $list_of_path; do
		# echo "1. $path"
		full_path="$PWD"
		full_path+="$path"
		full_path=$(echo "$full_path" | sed 's/\.\//\//')
		if [[ "$full_path" == *"$search_term"* ]]; then
			echo "$full_path"
			# loop_item="$path"
			# echo "########### Found: $path"
			# break
		else
			# handle this except part
			k=""
			# echo "q"
			# exit 1
			# echo "############ Not found: $path"
		fi
	done
	# echo ""
}

app_ckecker()
{
	local var="$1"
	result="$(finder "$var" "." "app_check" "$app")"
	echo "$var: $result"
}

entry()
{
	echo ""
	echo "Setting up Django project ..."
	echo ""
	read_input "project"
	response="$entry"
	quit "$response"
	response_check "$response"
	echo ""
	read -n 1 -s -r -p "Use ${response}_app as app name? [y/N]. [q] - quit >>> " app
	echo "$app"
	quit "$app" "app" "ok"
	if [[ "$app" =~ [yY] || "$app" == "" ]]; then
		appname="${response}_app"
		mo="yes"
	else
		read_input "app"
		appname="$entry"
		mo="no"
		quit "$appname" "app"
		echo "Confirm $appname as app name"
		read -n 1 -s -r -p "Good to go? [y/N]. [q] - quit >>> " good
		echo "$good"
		quit "$good" "app" "ok"
		if [[ "$good" =~ [yY] || "$good" == "" ]]; then
			good="good"
		else
			echo "Invalid entry"
			quit "q"
		fi
	fi

	app="$appname"
	if [[ "$response" == "$app" ]]; then
		echo "Oopsy! App name cannot be the same as Project name"
		exit 1
	fi

	#######################
	lines=".........................."
	echo "$lines"
	app_ckecker "admin.py"
	app_ckecker "views.py"
	app_ckecker "models.py"
	echo "app name: $app"
	echo "mo: $mo"
	echo "$lines"
	#######################

	installed=0
	if [[ "$(finder "admin.py" "." "app_check" "$app" "$mo")" == "$(finder "views.py" "." "app_check" "$app" "$mo")" &&
			"$(finder "admin.py" "." "app_check" "$app" "$mo")" == "$(finder "models.py" "." "app_check" "$app" "$mo")" &&
			"$(finder "admin.py" "." "app_check" "$app" "$mo")" == "$app" ]]; then
		echo "The app: $app is already installed."
		installed=1
		read -n 1 -s -r -p "Proceed to configure it? [y/N]. [q] - quit >>> " proceed
		echo "$proceed"
		quit "$proceed" "app" "ok"
	fi

	proceed="$(finder "activate" ".")"
	parent=0
	if [[ "$proceed" == "." ]]; then
		proceed="$(finder "activate" "..")"
		parent=1
	fi

	if [[ "$proceed" == "bin" ]]; then
		dir="."
		if [[ "$parent" -eq 1 ]]; then
			dir=".."
		fi
		proceed="$(finder "activate" "$dir" "file")"
		proceed="$(select_path "${response}_venv" "$proceed")"
		proceed=$(dirname "$proceed")
		proceed=$(echo "$proceed" | sed 's/\.\//\//')
		# proceed="$(finder "activate" "$dir" "arg")"
		# echo "cur dir1: $PWD"
		cd "$proceed"
		# echo "cur dir2: $PWD"
		# echo "path to venv: $proceed"
		echo "Activating virtual envionment ..."
		source activate
		venv_check
	fi
	venv_check
	proceed="$(finder "manage.py" "../.." "arg")"
	# echo "manage.py dir: $proceed"
	cd "$proceed"
	echo "app exist: $installed"
	if [[ "$installed" -eq 0 ]]; then
		app_err="$(startapp $app 2>&1 )"
		if [[ "$app_err" == *"CommandError"* ]]; then
			echo "Oopsy! the app: '$app' exists. Use another name"
			exit 1
		fi
	fi
	venv_check
	exit 0
	static4django
	jwtDjango
	drf
	djoser
	djangoToolbar

	echo ""
	echo -e "The following components have been installed and configured accordingly:
\t- ${response}_venv
\t- ${response}_project
\t- $app
\t- static4django
\t- jwtDjango
\t- drf
\t- xml renderer
\t- auth token
\t- djoser
\t- djangotoolbar

Use: requirement_txt - to auto create/update requirements.txt

Enjoy!"
echo ""
}

entry