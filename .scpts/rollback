#!/bin/bash

disp()
{
    page_size=9
    total_repos=${#entries_arr[@]}
    num_pages=$(( (total_repos + page_size - 1) / page_size ))

    page=1
    while true; do
        clear
        echo "Available commit history in: $repo_name"
        echo "Page $page:"
        
        serial_number=0
        for ((i = (page - 1) * page_size; i < page * page_size && i < total_repos; i++)); do
            ((serial_number++))
            echo -e "$serial_number. ${entries_arr[i]}"
            sleep 0.05
        done

        echo -e ""
        if (( $page > 1 )); then
            echo "[p] - Previous Page"
        fi

        if (( $page < $num_pages )); then
            echo "[n] - Next Page"
        fi
		echo "[q] - quit"

		selection=""
        echo -e ""
        read -n 1 -s -r -p "Enter the number corresponding to the commit you want to revert to >>> " selection
        echo -e "$selection"

        if [[ "$selection" =~ [qQ] ]]; then
			echo ""
			echo "Cheers"
			exit 0
		elif [[ "$selection" =~ [nN] && "$page" -lt "$num_pages" ]]; then
            ((page++))
        elif [[ "$selection" =~ [pP] && "$page" -gt 1 ]]; then
            ((page--))
        elif [[ "$selection" =~ ^[1-9]|[1-9][0-9]|[1-9][0-9][0-9]*$ && "$selection" -le "$serial_number" ]]; then
            converted_selection="$(( ($page - 1) * $page_size + $((selection-1)) ))"
            selected_commit_id=${hash_entries[$converted_selection]}
            selected_commit_message=${subject_entries[$converted_selection]}
            
			echo -e ""
            echo "You selected: $selected_commit_id with the commit: $selected_commit_message"
            break
        else
            echo "Invalid selection."
        fi
    done
}

streamedit()
{
	local var1="$1"
	local var2="$2"

	sed -i "s/$var1/$var2/g" "$XBIN/tempfile.txt"
}

BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
MAGENTA='\033[0;35m'
# ...............

# XBIN="$HOME/.xbin"
XBIN="."

repo_name=$(git config -l | grep -oP '(?<=\/)[^\/]+(?=\.git)')
entries_arr=()
hash_entries=()
subject_entries=()
while read -r line; do
    commit_hash_complete=$(echo "$line" | awk '{print $1}')
    commit_hash=$(echo "$line" | awk '{print substr($1, 1, 10)}')
    author=$(echo "$line" | awk '{print $2}')
    email=$(echo "$line" | awk '{print $3}')
    date=$(echo "$line" | awk '{print $4, $5, $6, $7, $8, $9}')
    subject_complete=$(echo "$line" | awk '{for (i=10; i<=NF; i++) printf "%s ", $i; print ""}')
    subject=$(echo "$line" | awk '{ s = ""; for (i=10; i<=NF; i++) { s = s $i " "; if (length(s) > 30) { s = substr(s, 1, 30) "... "; break; } } print s }')

    colored_commit_hash="${BLUE}$commit_hash\033[0m"
    colored_author="${YELLOW}$author\033[0m"
    colored_email="${GREEN}$email\033[0m"
    colored_subject="${MAGENTA}$subject\033[0m"

	colored_line="[$colored_commit_hash] $colored_author $date $colored_subject"

    entries_arr+=("$colored_line")
    hash_entries+=("$commit_hash_complete")
    subject_entries+=("$subject_complete")
done < <(git log --oneline --format="%H %an %ae %ad %s")

disp

# ..............................
RESP="$1"

if [[ -z "$RESP" ]]; then
    echo ""
	echo -n "Enter a commit message [[q] to abort] >>> "
	read RESP
	
	if [[ -z "$RESP" ]]; then
		echo "Commit message not found"
		exit 1
	elif [[ ${#RESP} =~ 1 && "$RESP" =~ [qQ] ]]; then
        echo ""
		echo "Ok."
		exit 0
	fi
fi
# ..............................

echo "default" > "$XBIN/tempfile.txt"
cp "$XBIN/default_commit_msg_for_revert.txt" "$XBIN/tempfile.txt"

git revert -n -m 1 $selected_commit_id

streamedit "<previous commit_message>" "$selected_commit_message"
streamedit "<user_commit_message>" "$RESP"
streamedit "<previous_commit_id>" "$selected_commit_id"

commit_resp=$(git commit -m "$(cat $XBIN/tempfile.txt)")
commit_entries_arr=()
res="failed"
while read -r line; do
    captured_content=$(echo "$line" | grep -o '\[.*\]')
    rest_of_line=$(echo "$line" | sed 's/\[.*\]//')

    if [[ "$line" == "["* ]]; then
        res="success"
        colored_line="\033[34m$captured_content\033[0m${rest_of_line}"
    else
        colored_line="$line"
    fi
    entries_arr+=("$colored_line")
# done < "msg.txt"
done < <(echo "$commit_resp")

for entry in "${commit_entries_arr[@]}"; do
    echo -e "$entry"
done

rm "$XBIN/tempfile.txt"
if [[ "$res" == "success" ]]; then
    echo ""
    echo "Revert to commit ID: $selected_commit_id"
    echo "With commit message: $selected_commit_message"
    echo "Successful ... "
else
    echo "Oops! Something went wrong."
fi