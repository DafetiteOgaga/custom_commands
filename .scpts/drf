#!/usr/bin/env bash

path1="$HOME/.xbin"
check=$(2>&1 $path1/pyfiles/django arg)
if [[ -n "$check" ]]; then
	echo "$check"
	if [[ "$check" == *"SQLite"* || "$check" == *"MySQL"* || "$check" == *"PostgreSQL"*
		|| "$check" == *"Multiple databases"* || "$check" == *"Unknown database"* ]]; then
		if [[ "$check" == *"You don't have mysqlclient"* ||
			"$check" == *"You don't have djangorestframework"* ]]; then
			exit 1
		fi
	elif [[ "$check" == *"change to the directory containing"* || "$check" == *"You don't have django installed or"* ]]; then
		exit 1
	fi
fi
has3=$("./pyfiles/isGitBash" 2>&1)

additonals()
	{
		local number="$1"
		if [[ "$number" == "1" ]]; then
			install="xml renderer"
			commandx="pip3 install -q djangorestframework-xml"
			argument="rest_framework_xml.renderers.XMLRenderer"
		elif [[ "$number" == "2" ]]; then
			install="rest_framework.authtoken"
			commandx=""
			argument="$install"
		fi
		read -n 1 -s -r -p "Install $install? [y/N]. [q] - quit >>> " xml
		echo "$xml"
		echo ""
		if [[ "$xml" =~ [yY] || "$xml" == "" ]]; then
			$commandx
			output2="$(echo "$argument" | python$has3 $path1 2>&1)"
			echo "$output2"
			echo ""
			echo "..............................................."
			echo "django $install has been installed and configured successfully in settings.py"
			echo "..............................................."
			echo -e "\n"
		else
			echo "Cheers."
			exit 0
		fi
	}

command="pip3 install -q djangorestframework"

if [ "$#" -gt 0 ]; then
	echo ""
	echo "This command takes no arguments"
elif [ "$#" -eq 0 ]; then
	path1="$path1/pyfiles/configure_settings_py.py"
	$command
	output1="$(echo "rest_framework" | python$has3 $path1 2>&1)"
	echo "$output1"
	echo ""
	if [[ "$output1" == *"you have a django app installed?"* ]]; then
		exit 1
	fi
	echo "..............................................."

	for number in {1..2} ; do
		additonals "$number"
	done
	echo "..............................................."
	echo "django RESTframework has also been installed and configured under INSTALLED_APPS in settings.py"
	echo ""
	echo "check out others: djoser, jwtDjango, djangoToolbar and static4django commands."
	echo "Note: if you are using a virtual environment, you need to specify the path to your interpreter in vscode to enable it recorgnise it."
	echo ""
	echo -e "installed API endpoints:
\t - category				List/creation of book categories
\t - category/<int>			Details of a specific book category
\t - books				List/creation of books
\t - books/<int>				Details of a specific book

\t - api-token-auth/			Django's auth token generation
\t - /users/				Allows users to register
\t - /users/activation/			Activate (confirm) the user's email addres
\t - /token/login/			Log in and receives a token
\t - /token/logout/			Log out
\t - /users/reset_password/		Allows users to reset their passwords
\t - /users/reset_password_confirm/	Allows users to confirm password reset
\t - /users/set_password/			Allows authenticated users to set new passwords
\t - /users/me/				RSetrieves details of currently authenticated user

run: mkandmigrate to makemigrations and migrate them."
fi